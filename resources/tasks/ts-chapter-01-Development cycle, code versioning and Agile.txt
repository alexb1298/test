Study materials: 
1. https://www.youtube.com/watch?v=w3jLJU7DT5E
2. https://www.atlassian.com/git/tutorials/what-is-git
3. https://docs.gitlab.com/ee/topics/gitlab_flow.html
4. https://www.atlassian.com/git/tutorials/what-is-version-control
5. https://nvie.com/posts/a-successful-git-branching-model 
6. https://www.cloudbees.com/blog/branching-strategy/
7. https://phoenixnap.com/blog/software-development-life-cycle
8. https://www.mountaingoatsoftware.com/agile
9. https://stackify.com/what-is-sdlc/
10.https://www.tutorialspoint.com/sdlc/sdlc_overview.htm
11.https://www.cloudbees.com/continuous-delivery/continuous-integration
12.https://www.atlassian.com/continuous-delivery/continuous-integration

Practical Part:

Practice git commands here: https://learngitbranching.js.org 
Install git on your laptop: https://www.youtube.com/watch?v=2j7fD92g-gE 

Using git bash commands implement following steps:
1. Create gitpractice repository on github server.
2. Create a .gitignore file and add all needed types to be ignored by git
3. Create a project from idea, create a class and push to the repository
4. Create another class and push to the repository again
5. Make some changes directly from github and update and merge on local repository
6. Make a third class, make some changes in first two classes and push to a different branch.
7. Copy repository from github to gitlab repository in folder/module for chapter 1.

After you learned git from command line study how to use git commands integrated in Idea:
https://www.youtube.com/watch?v=MaQnpCaiop0

General info:

branch and commit message naming:
feature/JT-<CHAPTER_NUMBER>_<CHAPTER_NAME_WITH_UNDERSCORE>

ex branch name:
feature/JT-07_exceptions_and_logging

commit message format:
[JT-<Chapter_Number>] <Chapter_Name for first commit/descriptive commit changes from 2nd commit and up>


ex first commit is name of the feature/chapter:
[JT-07] Exceptions and logging
ex next commits is actual changes that are buildable and runnable:
[JT-07] Fix output message, fix sonar issues and clean code

DOR/DOD:
Theoretic part is studied, all notions from excel documents are understood.
A discussion with trainer will clarify all notions and identify if chapter is ready to be taken in development.
Development is done locally and code changes are pushed to separated branch according to branching strategies.
Clean code, OOP and SOLID rules are applied and create a merge request for trainer to review. Trainer will open issues
and threads to be fixed and code quality to be improved. When code is ready will be merged to develop branch and if the
study is also finished the task for the chapter will gain status of DONE. Merge will be done with squash commits and
commit message will be the chapter number with name, according to commit message format.
